<%#
 Copyright (c) 2018, Tano Systems. All Rights Reserved.
 Anton Kikin <a.kikin@tano-systems.com>
-%>

<%+header%>

<style type="text/css">
	.table.mstpd-bridge-parameters .td:first-of-type { white-space: nowrap; }
	.table.mstpd-bridge-parameters .td:last-of-type { width: 100%; }
	.mstpd-yes { color: #0a0; }
	.mstpd-no  { color: black; }
</style>

<script type="text/javascript" src="<%=resource%>/cbi.js"></script>
<script type="text/javascript">//<![CDATA[

	var first = 1;

	function add_bridge_row(br, description, param_name, convert_cb = null, postfix = null)
	{
		var row = [];

		if (typeof br[param_name] == 'undefined')
			return;

		var value_str;
		
		if (convert_cb)
			value_str = convert_cb(br[param_name]);
		else
			value_str = br[param_name];

		row.push(description);
		row.push(value_str + (postfix ? (' ' + postfix) : ''));

		return row;
	}

	function add_ports_row(br, description, param_name, convert_cb = null)
	{
		var row = [];
		var ports_count = br.ports.length;

		row.push(description);

		for (i = 0; i < ports_count; i++)
		{
			var value_str = "";

			if (typeof br.ports[i][param_name] != 'undefined')
			{
				if (convert_cb)
					value_str = convert_cb(br.ports[i][param_name]);
				else
					value_str = br.ports[i][param_name];
			}

			row.push(value_str);
		}

		return row;
	}

	function tr_yn(value)
	{
		return (value == "no")
			? '<span class="mstpd-no">&#x2718; <%:no%></span>'
			: '<span class="mstpd-yes">&#x2714; <%:yes%></span>';
	}

	function tr_yna(value)
	{
		return (value == "auto") ? '<%:Auto%>' : tr_yn(value);
	}

	function tr_port_state(value)
	{
		return value.charAt(0).toUpperCase() + value.slice(1);
	}

	function tr_root_port(value)
	{
		return ((value == "none") || (value == "")) ? '&ndash;' : value;
	}

	function tr_br_protocol(value)
	{
		return value.toUpperCase();
	}

	function add_ports_table(br)
	{
		var inner = "";
		var ports_count = br.ports.length;
		var old_ports_count = 0;

		inner +=
			'<div class="table" id="mstpd-bridge-' + br['bridge'] + '-ports">';

		var tbl_ports = document.getElementById('mstpd-bridge-' + br['bridge'] + '-ports');

		if (tbl_ports)
		{
			var tr = tbl_ports.querySelector('.tr.table-titles, .cbi-section-table-titles');
			old_ports_count = tr.querySelectorAll('.th').length - 1;
		}

		if ((tbl_ports == null) || (old_ports_count != ports_count))
		{
			inner +=
				'<div class="tr table-titles">';

			inner += '<div class="th top"><%:Port parameter%></div>';
			for (i = 0; i < ports_count; i++)
				inner += '<div class="th top">' + br.ports[i]["port"] + '</div>';

			inner += '</div>';
			
			inner +=
				'<div class="tr placeholder">' +
				'<div class="td">' +
				'<em><%:Collecting data...%></em>' +
				'</div></div>';
		}
		else
		{
			inner += tbl_ports.innerHTML;
		}

		inner += '</div>';

		return inner;
	}

	function add_bridge(i, container, br)
	{
		var inner = "";

		// Header
		inner +=
			'<legend><%:Bridge%> ' + br["bridge"] + '</legend>' +
			'<div class="cbi-section-node">';

		// Bridge parameters
		inner +=
			'<div class="table mstpd-bridge-parameters" id="mstpd-bridge-' + br['bridge'] + '">';

		var tbl_bridge = document.getElementById('mstpd-bridge-' + br['bridge']);
		if (tbl_bridge == null)
		{
			inner +=
				'<div class="tr table-titles">' +
				'<div class="th top"><%:Bridge parameter%></div>'+
				'<div class="th top"><%:Value%></div>' +
				'</div>' +
				'<div class="tr placeholder">' +
				'<div class="td">' +
				'<em><%:Collecting data...%></em>' +
				'</div></div>';
		}
		else
			inner += tbl_bridge.innerHTML;

		inner += '</div>';

		// Ports table
		inner += add_ports_table(br)

		inner += '</div>'; // cbi-section-node

		var br_rows = [];
		var br_port_rows = [];

		br_rows.push(add_bridge_row(br, "<%=translate('Protocol')%>", "force-protocol-version", tr_br_protocol))
		br_rows.push(add_bridge_row(br, "<%=translate('Enabled')%>", "enabled", tr_yn))
		br_rows.push(add_bridge_row(br, "<%=translate('Bridge ID')%>", "bridge-id"))
		br_rows.push(add_bridge_row(br, "<%=translate('Designated root')%>", "designated-root"))
		br_rows.push(add_bridge_row(br, "<%=translate('Regional root')%>", "regional-root"))
		br_rows.push(add_bridge_row(br, "<%=translate('Root port')%>", "root-port", tr_root_port))
		br_rows.push(add_bridge_row(br, "<%=translate('Path cost')%>", "path-cost"))
		br_rows.push(add_bridge_row(br, "<%=translate('Max age')%>", "max-age", null, "<%:s%>"))
		br_rows.push(add_bridge_row(br, "<%=translate('Forward delay time')%>", "forward-delay", null, "<%:s%>"))
		br_rows.push(add_bridge_row(br, "<%=translate('Transmit hold count')%>", "tx-hold-count"))
		br_rows.push(add_bridge_row(br, "<%=translate('Hello time')%>", "hello-time", null, "<%:s%>"))
		br_rows.push(add_bridge_row(br, "<%=translate('Ageing time')%>", "ageing-time", null, "<%:s%>"))
		br_rows.push(add_bridge_row(br, "<%=translate('Time since topology change')%>", "time-since-topology-change", null, "<%:s%>"))

		br_port_rows.push(add_ports_row(br, "<%=translate('Enabled')%>", "enabled", tr_yn));
		br_port_rows.push(add_ports_row(br, "<%=translate('Port role')%>", "role"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Port state')%>", "state", tr_port_state));
		br_port_rows.push(add_ports_row(br, "<%=translate('Port identifier')%>", "port-id"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Port path cost')%>", "external-port-cost"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Designated root')%>", "designated-root"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Designated bridge')%>", "designated-bridge"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Designated port')%>", "designated-port"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Admin edge')%>", "admin-edge-port", tr_yn));
		br_port_rows.push(add_ports_row(br, "<%=translate('Auto edge')%>", "auto-edge-port", tr_yn));
		br_port_rows.push(add_ports_row(br, "<%=translate('Oper edge')%>", "oper-edge-port", tr_yn));
		br_port_rows.push(add_ports_row(br, "<%=translate('Admin P2P')%>", "admin-point-to-point", tr_yna));
		br_port_rows.push(add_ports_row(br, "<%=translate('Oper P2P')%>", "point-to-point", tr_yn));
		br_port_rows.push(add_ports_row(br, "<%=translate('Tx BPDU')%>", "num-tx-bpdu"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Rx BPDU')%>", "num-rx-bpdu"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Tx TCN')%>", "num-tx-tcn"));
		br_port_rows.push(add_ports_row(br, "<%=translate('Rx TCN')%>", "num-rx-tcn"));

		container.innerHTML = inner;

		cbi_update_table(
			document.getElementById('mstpd-bridge-' + br['bridge']),
			br_rows,
			'<em><%:No information available%></em>'
		);

		cbi_update_table(
			document.getElementById('mstpd-bridge-' + br['bridge'] + '-ports'),
			br_port_rows,
			'<em><%:No information available%></em>'
		);
	}

	XHR.poll(5, '<%=url('admin/status/mstpd/status_request')%>', null,
		function(x, json)
		{
			var mstpd_tables =
				document.getElementById('mstpd-tables');

			if (!json || !json.length)
			{
				mstpd_tables.innerHTML =
					'<div class="cbi-section-node">' +
					'<p class="alert-message warning">' +
					"<%:No information.%><br />" +
					"<%:Maybe you have no bridges with enabled STP support.%></em></p>" +
					'</p>' +
					'</div>';

				return;
			}

			for (i = 0; i < json.length; i++)
				add_bridge(i, mstpd_tables, json[i]);
		}
	)
//]]></script>

<h2 name="content"><%:MSTPd: Status%></h2>
<div class="cbi-map-descr"><%:This page allows you to see current MSTPd bridges and ports status%></div>

<fieldset class="cbi-section">
<legend><%:Service state%></legend>
<% include("mstpd/mstpd_running") %>

<div id="mstpd-tables">
	<div class="cbi-section-node">
		<em><%:Collecting data...%></em>
	</div>
	<br />
</div>
</fieldset>

<% include("mstpd/footer") -%>
<%+footer%>

<script type="text/javascript">cbi_init();</script>
