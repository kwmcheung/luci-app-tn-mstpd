<%#
 Copyright (c) 2018, Tano Systems. All Rights Reserved.
 Anton Kikin <a.kikin@tano-systems.com>
-%>
<%+header%>

<style type="text/css">
	.mstpd-yes { color: #0a0; }
	.mstpd-no  { color: black; }
	.mstpd-br-param { display: inline-block; min-width: 280px; }
</style>

<script type="text/javascript">//<![CDATA[
	var mstpd_br_recent = null

	var mstpd_br_params = {
		'force-protocol-version'     : '<%=translate("Administrative protocol version")%>',
		'enabled'                    : '<%=translate("Enabled")%>',
		'bridge-id'                  : '<%=translate("Bridge ID")%>',
		'designated-root'            : '<%=translate("Designated root")%>',
		'regional-root'              : '<%=translate("Regional root")%>',
		'root-port'                  : '<%=translate("Root port")%>',
		'path-cost'                  : '<%=translate("Path cost")%>',
		'max-age'                    : '<%=translate("Max age")%>',
		'forward-delay'              : '<%=translate("Forward delay time")%>',
		'tx-hold-count'              : '<%=translate("Transmit hold count")%>',
		'hello-time'                 : '<%=translate("Hello time")%>',
		'ageing-time'                : '<%=translate("Ageing time")%>',
		'time-since-topology-change' : '<%=translate("Time since topology change")%>'
	}

	var mstpd_brport_params = {
		'enabled'                    : '<%=translate("Enabled")%>',
		'received-stp'               : '<%=translate("Operative protocol version")%>',
		'role'                       : '<%=translate("Port role")%>',
		'state'                      : '<%=translate("Port state")%>',
		'port-id'                    : '<%=translate("Port identifier")%>',
		'external-port-cost'         : '<%=translate("Port path cost")%>',
		'designated-root'            : '<%=translate("Designated root")%>',
		'designated-bridge'          : '<%=translate("Designated bridge")%>',
		'designated-port'            : '<%=translate("Designated port")%>',
		'admin-edge-port'            : '<%=translate("Admin edge")%>',
		'auto-edge-port'             : '<%=translate("Auto edge")%>',
		'oper-edge-port'             : '<%=translate("Operative edge")%>',
		'admin-point-to-point'       : '<%=translate("Admin P2P")%>',
		'point-to-point'             : '<%=translate("Operative P2P")%>',
		'num-tx-bpdu'                : '<%=translate("Tx BPDU")%>',
		'num-rx-bpdu'                : '<%=translate("Rx BPDU")%>',
		'num-tx-tcn'                 : '<%=translate("Tx TCN")%>',
		'num-rx-tcn'                 : '<%=translate("Rx TCN")%>',
	}

	function elm(id) {
		return document.getElementById(id)
	}

	///////////////////////////////////////////////////////////////////////////

	function vcb_yn(br, v) {
		return (v == "no")
			? '<span class="mstpd-no">&#x2718; <%:no%></span>'
			: '<span class="mstpd-yes">&#x2714; <%:yes%></span>'
	}

	function vcb_yna(br, v) {
		return (v == "auto") ? '<%:Auto%>' : vcb_yn(br, v)
	}

	function vcb_seconds(br, v) {
		return '<%:%d s%>'.format(v)
	}

	function vcb_port_state(br, v) {
		if (v == "forwarding")
			return '<span class="alert-message success">Forwarding</span>'
		else if (v == "learning")
			return '<span class="alert-message info">Learning</span>'
		else
			return v.charAt(0).toUpperCase() + v.slice(1);
	}

	function vcb_port_role(br, v) {
		if (v == "Designated")
			return '<span class="alert-message success">Designated</span>'
		else if (v == "Alternate")
			return '<span class="alert-message warning">Alternate</span>'
		else if (v == "Root")
			return '<span class="alert-message info">Root</span>'
		else
			return v
	}

	function vcb_num_or_dash(br, v) {
		return parseInt(v) == 0 ? '&ndash;' : v
	}

	///////////////////////////////////////////////////////////////////////////

	function mstpd_br_status_add(br, option, value_cb_func)
	{
		var html = ''

		if (!mstpd_br_params[option] || (typeof br[option] == 'undefined'))
			return html

		if (!value_cb_func)
			value_cb_func = function(br, v) { return v }

		html = '<li><span class="mstpd-br-param">%s:</span> %s</li>'.format(
			mstpd_br_params[option],
			value_cb_func(br, br[option])
		)

		return html
	}

	function mstpd_br_status_update(br)
	{
		var list = elm('mstpd-br-status')
		var html = ''

		html += mstpd_br_status_add(br, "force-protocol-version", function(br, v) {
			return v.toUpperCase()
		})

		html += mstpd_br_status_add(br, "enabled", vcb_yn)
		html += mstpd_br_status_add(br, "bridge-id")
		html += mstpd_br_status_add(br, "designated-root")
		html += mstpd_br_status_add(br, "regional-root")

		html += mstpd_br_status_add(br, "root-port", function(br, v) {
			return ((v == "none") || (v == "")) ? '<%:none%>' : v
		})

		html += mstpd_br_status_add(br, "path-cost")
		html += mstpd_br_status_add(br, "max-age", vcb_seconds)
		html += mstpd_br_status_add(br, "forward-delay", vcb_seconds)
		html += mstpd_br_status_add(br, "tx-hold-count")
		html += mstpd_br_status_add(br, "hello-time", vcb_seconds)
		html += mstpd_br_status_add(br, "ageing-time", vcb_seconds)
		html += mstpd_br_status_add(br, "time-since-topology-change", vcb_seconds)

		list.innerHTML = html
	}

	///////////////////////////////////////////////////////////////////////////

	function mstpd_brports_tbl_header(tbl, br)
	{
		var p
		var len = br.ports.length

		if (!mstpd_br_recent || (len != mstpd_br_recent.ports.length))
		{
			var inner = ''

			inner += '<div class="tr table-titles">'
			inner += '<div class="th top left"></div>'

			for (p = 0; p < len; p++)
			{
				inner += '<div id="mstpd-brports-status-header-' + p +
					'" class="th top right">'

				inner += br.ports[p].port
				inner += '</div>'
			}

			inner += '</div>'
			tbl.innerHTML = inner;
		}
		else
		{
			for (p = 0; p < len; p++)
			{
				var header = elm('mstpd-brports-status-header-' + p)
				header.innerHTML = br.ports[p].port
			}
		}
	}

	function mstpd_brports_status_add(br, option, value_cb_func)
	{
		var row = []

		console.log(option);

		if (!mstpd_brport_params[option])// || (typeof br[option] == 'undefined'))
			return null

		if (!value_cb_func)
			value_cb_func = function(br, v) { return v }

		row.push(mstpd_brport_params[option])

		br.ports.forEach(function(p) {
			row.push(value_cb_func(br, p[option]))
		})

		return row
	}

	function mstpd_brports_tbl_rows(tbl, br, short_mode)
	{
		var rows = []

		rows.push(mstpd_brports_status_add(br, "enabled", vcb_yn))

		rows.push(mstpd_brports_status_add(br, "received-stp", function(br, v){
			if (br["force-protocol-version"] === "stp") {
				return '<span class="alert-message success">STP</span>'
			} else {
				if (v === "yes")
					return '<span class="alert-message error">STP</span>'
				else
					return '<span class="alert-message success">RSTP</span>'
			}
		}))

		rows.push(mstpd_brports_status_add(br, "role", vcb_port_role))
		rows.push(mstpd_brports_status_add(br, "state", vcb_port_state))
		rows.push(mstpd_brports_status_add(br, "port-id"))
		rows.push(mstpd_brports_status_add(br, "designated-root"))
		rows.push(mstpd_brports_status_add(br, "designated-bridge"))
			
		rows.push(mstpd_brports_status_add(br, "designated-port", function(br, v) {
			if (v === '0.000')
				return '&ndash;'
			return v
		}))

		if (!short_mode)
		{
			rows.push(mstpd_brports_status_add(br, "external-port-cost"))
			rows.push(mstpd_brports_status_add(br, "admin-edge-port", vcb_yn))
			rows.push(mstpd_brports_status_add(br, "auto-edge-port", vcb_yn))
			rows.push(mstpd_brports_status_add(br, "oper-edge-port", vcb_yn))
			rows.push(mstpd_brports_status_add(br, "admin-point-to-point", vcb_yna))
			rows.push(mstpd_brports_status_add(br, "point-to-point", vcb_yn))
			rows.push(mstpd_brports_status_add(br, "num-tx-bpdu", vcb_num_or_dash))
			rows.push(mstpd_brports_status_add(br, "num-rx-bpdu", vcb_num_or_dash))
			rows.push(mstpd_brports_status_add(br, "num-tx-tcn", vcb_num_or_dash))
			rows.push(mstpd_brports_status_add(br, "num-rx-tcn", vcb_num_or_dash))
		}

		cbi_update_table(tbl, rows,
			'<%:There is no available information%>');
	}

	function mstpd_brports_status_update(br)
	{
		var tbl = elm('mstpd-brports-status')
		var short_mode = true

		var btn_toggle =
			elm('mstpd-brports-toggle-additional-btn');

		short_mode = (btn_toggle.getAttribute('data-short') === "true");
		btn_toggle.setAttribute('value', short_mode
			? '<%:Show additional information%>'
			: '<%:Hide additional information%>')

		btn_toggle.removeAttribute('disabled', true);

		mstpd_brports_tbl_header(tbl, br)
		mstpd_brports_tbl_rows(tbl, br, short_mode)
	}

	function mstpd_brports_toggle_additional(btn)
	{
		var additional = (btn.getAttribute('data-short') === 'false');

		btn.setAttribute('data-short', additional)
		btn.setAttribute('disabled', true)
		btn.blur()

		if (mstpd_br_recent)
			mstpd_brports_status_update(mstpd_br_recent)
	}

	///////////////////////////////////////////////////////////////////////////

	function mstpd_update(data)
	{
		mstpd_br_status_update(data[0])
		mstpd_brports_status_update(data[0])
		mstpd_br_recent = data[0]
	}

	XHR.poll(5, '<%=url('admin/services/mstpd/status_request')%>', { bridge: '<%=bridge%>' },
		function(x, json)
		{
			var s = elm('mstpd-status-content')
			var f = elm('mstpd-status-content-fail')

			if (json && json.length)
			{
				var b = elm('mstpd-brports-toggle-additional-btn')
				b.style.display = "block"

				mstpd_update(json)
				f.style.display = "none"
				s.style.display = "block"
			}
			else
			{
				s.style.display = "none"
				f.style.display = "block"

				f.innerHTML =
					'<div class="cbi-section-node">' +
					'<p class="alert-message error">' +
					'<%=translatef("Failed to request bridge \"%s\" status information.", bridge)%>' +
					'</p></div>'
			}
		}
	)
//]]></script>

<h2 name="content"><%=translatef("MSTPd: Bridge \"%s\" status", bridge)%></h2>
<div class="cbi-map-descr"><%:This page allows you to see current state of the STP/RSTP bridge and its ports%></div>
<div id="mstpd-status-content-fail" style="display:none"></div>
<div id="mstpd-status-content">
<fieldset class="cbi-section">
	<legend><%=translatef("Bridge \"%s\"", bridge)%></legend>
	<ul id="mstpd-br-status">
		<li><em><%:Collecting data...%></em></li>
	</ul>
</fieldset>

<fieldset class="cbi-section">
	<legend><%=translatef("Bridge \"%s\" ports", bridge)%></legend>
	<div class="table" id="mstpd-brports-status">
		<div class="tr table-titles">
			<div class="th top center">...</div>
		</div>
		<div class="tr placeholder">
			<div class="td"><em><%:Collecting data...%></em></div>
		</div>
	</div>
	<input class="cbi-button cbi-button-apply"
		id="mstpd-brports-toggle-additional-btn"
		data-short="true"
		type="button"
		style="display: none"
		value="..."
		disabled="true"
		onclick="mstpd_brports_toggle_additional(this)" />
</fieldset>
</div>

<%+mstpd/footer%>
<%+footer%>
